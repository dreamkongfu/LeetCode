/*
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
*/





class Solution {
    public int numDecodings(String s) {
        int len = s.length();
        
        int[] A = new int[len];
        if(len==0) return 0;
        if(len==1) return s.charAt(len-1)!='0' ? 1:0;
        
        int lastTwo = Integer.parseInt(s.substring(len-2));
        if(lastTwo==0||s.charAt(0)=='0') return 0;
        A[len-1] = s.charAt(len-1)!='0'?1:0;
        A[len-2] = (lastTwo <=26 && s.charAt(len-2)!='0')? A[len-1]+1:A[len-1];
        
            
        for(int i =len-3;i>=0;i--){
           int two =  Integer.parseInt(s.substring(i,i+2));
           if(two==0||(two%10==0&&two>20)){
               A[0]=0;
               break;
           }
           A[i]=(two <=26 && s.charAt(i)!='0'&&two%10!=0 &&lastTwo%10!=0)? 
           A[i+1]+A[i+2]:A[i+1];
           lastTwo = two;
        }
        return A[0];
    }
}
